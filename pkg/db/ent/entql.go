// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/stock-manager/pkg/db/ent/stock"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stock.FieldID,
			},
		},
		Type: "Stock",
		Fields: map[string]*sqlgraph.FieldSpec{
			stock.FieldGoodID:    {Type: field.TypeUUID, Column: stock.FieldGoodID},
			stock.FieldTotal:     {Type: field.TypeInt32, Column: stock.FieldTotal},
			stock.FieldInService: {Type: field.TypeInt32, Column: stock.FieldInService},
			stock.FieldSold:      {Type: field.TypeInt32, Column: stock.FieldSold},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (sq *StockQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StockQuery builder.
func (sq *StockQuery) Filter() *StockFilter {
	return &StockFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StockMutation builder.
func (m *StockMutation) Filter() *StockFilter {
	return &StockFilter{m}
}

// StockFilter provides a generic filtering capability at runtime for StockQuery.
type StockFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *StockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *StockFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(stock.FieldID))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *StockFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(stock.FieldGoodID))
}

// WhereTotal applies the entql int32 predicate on the total field.
func (f *StockFilter) WhereTotal(p entql.Int32P) {
	f.Where(p.Field(stock.FieldTotal))
}

// WhereInService applies the entql int32 predicate on the in_service field.
func (f *StockFilter) WhereInService(p entql.Int32P) {
	f.Where(p.Field(stock.FieldInService))
}

// WhereSold applies the entql int32 predicate on the sold field.
func (f *StockFilter) WhereSold(p entql.Int32P) {
	f.Where(p.Field(stock.FieldSold))
}
